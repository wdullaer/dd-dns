name: Default Workflow
on: [push, pull_request]
jobs:
  test:
    name: test
    strategy:
      matrix:
        go-version: [1.12.x, 1.13.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
        id: go
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go test ./... -cover
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.21.0
      - run: export PATH=${PATH}:`go env GOPATH`/bin && golangci-lint run
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: release
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: CGOENABLED=0 GOOS=linux GOARCH=amd64 go build -o release/linux-amd64/proto-filter
      - run: CGOENABLED=0 GOOS=linux GOARCH=386 go build -o release/linux-386/proto-filter
      - run: CGOENABLED=0 GOOS=linux GOARCH=arm go build -o release/linux-arm/proto-filter
      - run: CGOENABLED=0 GOOS=darwin GOARCH=amd64 go build -o release/darwin-amd64/proto-filter
      - run: CGOENABLED=0 GOOS=windows GOARCH=amd64 go build -o release/windows-amd64/proto-filter.exe
      - run: CGOENABLED=0 GOOS=windows GOARCH=386 go build -o release/windows-386/proto-filter.exe
      - run: |
          for PLATFORM in $(find ./release -mindepth 1 -maxdepth 1 -type d); do
            OSARCH=$(basename ${PLATFORM})
            echo "--> ${OSARCH}"
            pushd "${PLATFORM}" >/dev/null 2>&1
            zip "../${OSARCH}.zip" ./*
            popd >/dev/null 2>&1
            rm -rf "${PLATFORM}/"
          done
      - uses: softprops/action-gh-release@v1
        with:
          files: release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}